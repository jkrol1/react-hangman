{"version":3,"sources":["apis/randomWord.js","actions/index.js","actions/types.js","assets/hangmanSvgParts.js","components/HangmanGraphic.js","components/GuessFields.js","components/UserInput.js","components/Modal.js","components/App.js","reducers/gameStateReducer.js","reducers/index.js","index.js"],"names":["axios","create","baseURL","fetchRandomWord","dispatch","a","randomWord","get","response","type","payload","data","toUpperCase","hangmanSvgParts","strokeLinecap","key","strokeLinejoin","id","y2","x2","y1","x1","fillOpacity","strokeOpacity","strokeWidth","stroke","fill","ry","rx","cy","cx","transform","HangmanGraphic","userChances","className","width","height","xmlns","viewBox","slice","GuessFields","guessedLetters","guessFields","i","length","includes","push","renderGuessFields","UserInput","letters","map","letter","onClick","e","letterContainer","textContent","classList","add","checkLetter","currentTarget","Modal","message","actions","actionButton","action","App","useSelector","state","gameState","gameStarted","useDispatch","useEffect","Array","from","Set","join","replace","checkIfGameWon","INITIAL_STATE","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.0343974e.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n    baseURL: 'https://random-word-api.herokuapp.com/word?number=1&swear=0'\n});","import randomWord from '../apis/randomWord';\n\nimport { FETCH_RANDOM_WORD, CORRECT_USER_GUESS, INCORRECT_USER_GUESS, RESET_GAME, GAME_STARTED } from './types';\n\nexport const fetchRandomWord = () => async dispatch => {\n    const response = await randomWord.get();\n    dispatch({ type: FETCH_RANDOM_WORD, payload: response.data[0].toUpperCase() });\n};\n\nexport const correctUserGuess = guess => {\n    return {\n        type: CORRECT_USER_GUESS,\n        payload: guess\n    }\n};\n\nexport const incorrectUserGuess = () => {\n    return {\n        type: INCORRECT_USER_GUESS\n    }\n};\n\nexport const resetGame = () => {\n    return {\n        type: RESET_GAME\n    }\n};\n\nexport const gameStarted = () => {\n    return {\n        type: GAME_STARTED\n    }\n};","export const FETCH_RANDOM_WORD = 'GET_RANDOM_WORD';\nexport const CORRECT_USER_GUESS = 'CORRECT_USER_GUESS';\nexport const INCORRECT_USER_GUESS = 'INCORRECT_USER_GUESS';\nexport const RESET_GAME = 'RESET_GAME';\nexport const GAME_STARTED = 'GAME_STARTED';","import React from 'react';\n\nconst hangmanSvgParts = [\n    <line strokeLinecap=\"undefined\" key=\"part_1\" strokeLinejoin=\"undefined\" id=\"svg_6\" y2=\"226\" x2=\"5\" y1=\"226\" x1=\"211\" fillOpacity=\"null\" strokeOpacity=\"null\" strokeWidth=\"3\" stroke=\"#000\" fill=\"none\" />,\n    <line strokeLinecap=\"undefined\" key=\"part_2\" strokeLinejoin=\"undefined\" id=\"svg_5\" y2=\"226\" x2=\"109\" y1=\"12\" x1=\"109\" strokeWidth=\"6.5\" stroke=\"#000\" fill=\"none\" />,\n    <line strokeLinecap=\"undefined\" key=\"part_3\" strokeLinejoin=\"undefined\" id=\"svg_9\" y2=\"15\" x2=\"201\" y1=\"15\" x1=\"108\" fillOpacity=\"null\" strokeOpacity=\"null\" strokeWidth=\"7\" stroke=\"#000\" fill=\"none\" />,\n    <line strokeLinecap=\"undefined\" key=\"part_4\" strokeLinejoin=\"undefined\" id=\"svg_10\" y2=\"59\" x2=\"199\" y1=\"15\" x1=\"199\" fillOpacity=\"null\" strokeOpacity=\"null\" strokeWidth=\"3\" stroke=\"#000\" fill=\"none\" />,\n    <ellipse ry=\"18\" rx=\"21\" id=\"svg_11\" cy=\"77\" cx=\"199\" key=\"part_5\" fillOpacity=\"null\" strokeOpacity=\"null\" strokeWidth=\"3\" stroke=\"#000\" fill=\"none\" />,\n    [<line transform=\"rotate(1.0139787197113037 199.49999999999966,107.49999999999905) \" key=\"part_6\" strokeLinecap=\"null\" strokeLinejoin=\"null\" id=\"svg_12\" y2=\"119\" x2=\"200\" y1=\"96\" x1=\"199\" fillOpacity=\"null\" strokeOpacity=\"null\" strokeWidth=\"3\" stroke=\"#000\" fill=\"none\" />,\n    <line strokeLinecap=\"null\" key=\"part_7\" strokeLinejoin=\"null\" id=\"svg_16\" y2=\"140\" x2=\"200\" y1=\"115\" x1=\"200\" fillOpacity=\"null\" strokeOpacity=\"null\" strokeWidth=\"3\" stroke=\"#000\" fill=\"none\" />],\n    <line stroke=\"#000\" key=\"part_8\" strokeLinecap=\"null\" strokeLinejoin=\"null\" id=\"svg_14\" y2=\"127.999999\" x2=\"176.000001\" y1=\"108\" x1=\"199\" fillOpacity=\"null\" strokeOpacity=\"null\" strokeWidth=\"3\" fill=\"none\" />,\n    <line strokeLinecap=\"null\" key=\"part_9\" strokeLinejoin=\"null\" id=\"svg_20\" y2=\"127\" x2=\"224\" y1=\"109\" x1=\"199\" fillOpacity=\"null\" strokeOpacity=\"null\" strokeWidth=\"3\" stroke=\"#000\" fill=\"none\" />,\n    <line stroke=\"#000\" strokeLinecap=\"null\" key=\"part_10\" strokeLinejoin=\"null\" id=\"svg_21\" y2=\"175.000002\" x2=\"179\" y1=\"140\" x1=\"200\" fillOpacity=\"null\" strokeOpacity=\"null\" strokeWidth=\"3\" fill=\"none\" />,\n    <line stroke=\"#000\" strokeLinecap=\"null\" key=\"part_11\" strokeLinejoin=\"null\" id=\"svg_22\" y2=\"175\" x2=\"222.999999\" y1=\"141\" x1=\"200\" fillOpacity=\"null\" strokeOpacity=\"null\" strokeWidth=\"3\" fill=\"none\" />\n]\n\nexport default hangmanSvgParts;","import React from 'react';\nimport hangmanSvgParts from '../assets/hangmanSvgParts';\n\nconst HangmanGraphic = ({ userChances }) => {\n\n    return (\n        <section className=\"hangman\">\n            <svg width=\"100%\" height=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 230 240\">\n                <g id=\"svg_23\">\n                    {hangmanSvgParts.slice(0, 10 - userChances)}\n                </g>\n            </svg>\n        </section >\n    );\n};\n\nexport default HangmanGraphic;","import React from 'react';\n\nconst renderGuessFields = (randomWord, guessedLetters) => {\n\n    let guessFields = [];\n\n    for (let i = 0; i < randomWord.length; i++) {\n\n        if (guessedLetters.includes(randomWord[i])) {\n            guessFields.push(<li key={`letter_${i}`} className=\"random-word__letter\">{randomWord[i]}</li>);\n        } else {\n            guessFields.push(<li key={`letter_${i}`} className=\"random-word__letter\">{randomWord[i] !== '-' ? '_' : '-'}</li>)\n        };\n    };\n\n    return guessFields;\n\n};\n\nconst GuessFields = ({ randomWord, guessedLetters }) => {\n\n    return (\n        <section className=\"random-word\">\n            <ul className=\"random-word__list\">\n                {renderGuessFields(randomWord, guessedLetters)}\n            </ul>\n        </section>\n    );\n};\n\nexport default GuessFields;","import React from 'react';\nimport { correctUserGuess, incorrectUserGuess } from '../actions/index';\n\nconst checkLetter = (letterContainer, randomWord, dispatch) => {\n\n    if (randomWord.includes(letterContainer.textContent)) {\n        letterContainer.classList.add('input__letter--correct');\n        dispatch(correctUserGuess(letterContainer.textContent));\n    } else {\n        letterContainer.classList.add('input__letter--incorrect');\n        dispatch(incorrectUserGuess());\n    }\n\n};\n\nconst UserInput = ({ randomWord, dispatch }) => {\n\n    let letters = [...'ABCDEFGHIJKLMNOPQRSTUVWXYZ'];\n\n    letters = letters.map((letter) => {\n        return <div key={letter} onClick={(e) => checkLetter(e.currentTarget, randomWord, dispatch)} className=\"input__letter\">{letter}</div>;\n    });\n\n    return (\n        <section className=\"input\">\n            {letters}\n        </section>\n    );\n\n};\n\nexport default UserInput;\n","import React from 'react';\n\nconst Modal = ({ message, actions, randomWord }) => {\n\n    if (randomWord) {\n        return (\n            <div className=\"modal\">\n                <h1 className=\"modal__game-state\">\n                    {message}\n                </h1>\n                <h2 className=\"modal__randomWord\">\n                    <p className=\"modal__text\">Correct answer:</p>\n                    <p className=\"modal__answer\">{randomWord}</p>\n                </h2>\n                <div className=\"modal__actions\">\n                    {actions}\n                </div>\n            </div>\n        );\n    } else {\n\n        return (\n            <div className=\"modal\">\n                <h1 className=\"modal__game-state\">\n                    {message}\n                </h1>\n                <div className=\"modal__actions\">\n                    {actions}\n                </div>\n            </div>\n        );\n    };\n};\n\nexport default Modal;","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { resetGame, fetchRandomWord, gameStarted } from '../actions/index';\nimport HangmanGraphic from './HangmanGraphic';\nimport GuessFields from './GuessFields';\nimport UserInput from './UserInput';\nimport Modal from './Modal';\n\nconst actionButton = (dispatch, action) => {\n\n    if (action === 'gameStart') {\n        return (\n            <>\n                <button className=\"modal__btn\" onClick={() => dispatch(gameStarted())}>Start</button>\n            </>\n        )\n    }\n    else if (action === 'gameLost' || action === 'gameWon') {\n        return (\n            <>\n                <button className=\"modal__btn\" onClick={() => {\n                    dispatch(resetGame())\n                    dispatch(fetchRandomWord())\n                }\n                }>{action === 'gameWon' ? 'Next Word' : 'Try Again'}</button>\n            </>\n        )\n    };\n};\n\nconst checkIfGameWon = (randomWord, guessedLetters) => {\n\n    const randomWordWoDuplicates = Array.from(new Set(randomWord)).join('').replace('-', '');\n    const gameWon = randomWordWoDuplicates.length === guessedLetters.length & randomWord !== '';\n    return gameWon;\n}\n\nconst App = () => {\n\n    const { userChances, gameStarted, guessedLetters, randomWord } = useSelector(state => state.gameState);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchRandomWord());\n    }, []);\n\n    if (gameStarted === false) {\n        return <Modal message=\"Click Start to Play the game :)\" actions={actionButton(dispatch, 'gameStart')} />\n    }\n\n    else if (userChances === 0) {\n        return <Modal message=\"Game Over :(\" randomWord={randomWord} actions={actionButton(dispatch, 'gameLost')} />\n    }\n\n    else if (checkIfGameWon(randomWord, guessedLetters)) {\n        return <Modal message=\"You Won ! :)\" randomWord={randomWord} actions={actionButton(dispatch, 'gameWon')} />\n    }\n\n    return (\n        <div className=\"wrapper\">\n            <HangmanGraphic userChances={userChances} />\n            <GuessFields randomWord={randomWord} guessedLetters={guessedLetters} />\n            <UserInput randomWord={randomWord} dispatch={dispatch} />\n        </div>\n    );\n\n};\n\nexport default App;","import { CORRECT_USER_GUESS, INCORRECT_USER_GUESS, RESET_GAME, GAME_STARTED, FETCH_RANDOM_WORD } from '../actions/types';\n\nconst INITIAL_STATE = {\n    randomWord: '',\n    gameStarted: false,\n    guessedLetters: '',\n    userChances: 10,\n}\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case FETCH_RANDOM_WORD:\n            return { ...state, randomWord: action.payload };\n        case GAME_STARTED:\n            state['gameStarted'] === false ? state['gameStarted'] = true : state['gameStarted'] = false;\n            return { ...state };\n        case CORRECT_USER_GUESS:\n            state['guessedLetters'] += action.payload;\n            return { ...state };\n        case INCORRECT_USER_GUESS:\n            state['userChances'] -= 1;\n            return { ...state };\n        case RESET_GAME:\n            state['randomWord'] = '';\n            state['guessedLetters'] = '';\n            state['userChances'] = 10;\n            return { ...state };\n        default:\n            return state;\n    }\n};\n","import { combineReducers } from 'redux';\nimport gameStateReducer from './gameStateReducer';\n\nexport default combineReducers({\n    gameState: gameStateReducer\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport reduxThunk from 'redux-thunk';\nimport reducers from './reducers';\nimport './styles/main.scss';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n    reducers,\n    composeEnhancers(applyMiddleware(reduxThunk))\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.querySelector('#root')\n);\n\n"],"sourceRoot":""}